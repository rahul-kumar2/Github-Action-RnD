# This is a basic workflow to help you get started with Actions

name: HelloCI/CD

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]



  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  acr_name: rahulacrvssub.azurecr.io
  acr_user_name: rahulacrvssub
  acr_repository_name: k8sdemo
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.sha }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    #runs-on: self-hosted
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: echo-default-env-variables
        run: |
           echo "GITHUB_WORKSPACE = $GITHUB_WORKSPACE"
           echo "github.workspace = ${{ github.workspace }}"
           echo "${{ github.workspace }}" + "\HelloWorldAPI\HelloWorldAPI.sln"
           echo "${{ github.workspace }}\HelloWorldAPI\HelloWorldAPI.sln"
           echo  ${{runner.temp}}
           echo  ${{secrets.GIST_AUTH_TOKEN}}
           echo  ${{secrets.GITHUB_TOKEN }}
           echo  ${{ github.actor }}
           echo  ${{ env.REGISTRY }}
           echo  ${{ github.repository }}
           echo  $IMAGE_NAME
           echo  $acr_name
           echo  ${{ env.acr_name }}
           echo ${{ steps.branch-name.outputs.current_branch }}


      - name: token-replacement
        uses: cschleiden/replace-tokens@v1.1
        with:
          tokenPrefix: '{{'
          tokenSuffix: '}}'
          files: '["**/*.json"]'
        env:
          #CDN: https://somecdn.com/...
          GIST_AUTH_TOKEN: $secrets.GIST_AUTH_TOKEN


      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x
          
      - name: login to acr
        uses: docker/login-action@v1 
        with:
          registry: ${{ env.acr_name }}
          username: ${{ env.acr_user_name }}
          password: ${{ secrets.acr_pwd }}
          
      #- run: |
      #    docker build -f ${{ github.workspace }}/HelloWorldAPI/Dockerfile . -t ${{ env.acr_name }}/${{ env.acr_repository_name }}:${{ github.sha }}
      #    docker push ${{env.acr_name}}/${{env.acr_repository_name}}:${{ github.sha }}


      - name: Push to github registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build image
        run: docker build . --file ${{ github.workspace }}/HelloWorldAPI/Dockerfile --tag $IMAGE_NAME --label "runnumber=${{ github.sha }}"

      #- name: Push image
      #  run: |
      #    repo=$(echo ${{ github.repository }} | tr '[A-Z]' '[a-z]')
      #    IMAGE_ID=${{ env.REGISTRY }}/$repo/$IMAGE_NAME
      #    docker tag $IMAGE_NAME $IMAGE_ID:latest
      #    #docker push $IMAGE_ID:$VERSION
      #    docker push $IMAGE_ID 

  test:
    needs: [build]
    uses:  rahul-kumar2/github-action-rnd/.github/workflows/deploy.yml@main
    with:
      username: test

  pre-prod:
    needs: [build]
    uses:  rahul-kumar2/github-action-rnd/.github/workflows/deploy.yml@main
    #if: ${{ <expression> }}
    with:
      username: preprod

  prod:
    needs: [pre-prod]
    uses:  rahul-kumar2/github-action-rnd/.github/workflows/deploy.yml@main
    with:
      username: prod
 



  #test:
  #  needs: [build]
  #  runs-on: ubuntu-latest

  #  steps:
  #    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  #    - uses: actions/checkout@v2
  #    - run: env




 

 


 



      #- name: Restore dependencies
      #  #run: dotnet restore **/HelloWorldAPI.sln
      #  run: dotnet restore ${{ github.workspace }}/HelloWorldAPI/HelloWorldAPI.sln

      #- name: Build
      #  #run: dotnet build **/HelloWorldAPI.sln --no-restore
      #  run: dotnet build ${{ github.workspace }}/HelloWorldAPI/HelloWorldAPI.sln --no-restore

      #- name: Test
      #  #run: dotnet test **/*.UnitTests.csproj --no-build --verbosity normal --collect:"XPlat Code Coverage" --logger trx
      #  run: dotnet test ${{ github.workspace }}/HelloWorldAPI/HelloWorldAPI.sln --no-build --verbosity normal --collect:"XPlat Code Coverage" --logger trx













      #- name: Test
      #  run: dotnet test  -p:CollectCoverage=true -p:CoverletOutput=TestResults/ -p:CoverletOutputFormat=opencover --no-build --verbosity normal <MyProject>.Tests/
    
      
      #- name: Copy Coverage To Predictable Location
      #  run: cp ${{ github.workspace }}/TestSample.UnitTests/TestResults/*/coverage.cobertura.xml ${{runner.temp}}/scoverage.cobertura.xml
      #  #run: cp ${{ github.workspace }}/HelloWorldAPI/HelloWorldAPI.sln ${{runner.temp}}/ 
      

      #- name: Create Test Coverage Badge
      #  uses: simon-k/dotnet-code-coverage-badge@v1.0.0
      #  id: create_coverage_badge
      #  with:
      #    label: Unit Test Coverage
      #    color: brightgreen
      #    path: ${{runner.temp}}/scoverage.cobertura.xml
      #    gist-filename: code-coverage.json
      #    gist-id: 5bf83e97a2a65cce5fdb16e1eb1d1dbe
      #    gist-auth-token: ${{ secrets.GIST_AUTH_TOKEN }}       
    

      #- name: Copy Coverage To Predictable Location
      #  run: cp ${{ github.workspace }}/TestSample.UnitTests/TestResults/*/coverage.cobertura.xml ${{runner.temp}}/scoverage.cobertura.xml
      #  #run: cp ${{ github.workspace }}/HelloWorldAPI/HelloWorldAPI.sln ${{runner.temp}}/ 

 

      #- name: Code Coverage Summary Report
      #  uses: irongut/CodeCoverageSummary@v1.0.2
      #  with:
      #    filename: ${{runner.temp}}/scoverage.cobertura.xml
      #    badge: true
      #    format: 'markdown'
      #    output: 'both'
     




      #- name: Publish
      #  run: dotnet publish HelloWorldAPI/HelloWorldAPI.csproj -c Release -o web

      #- name: Upload a Build Artifact
      #  uses: actions/upload-artifact@v2.3.1
      #  with:
      #    # Artifact name
      #    name: web
      #    # A file, directory or wildcard pattern that describes what to upload
      #    path: HelloWorldAPI/web/**
      #    if-no-files-found: error 